<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>ecioV</title>
<script src="//code.jquery.com/jquery-2.0.3.min.js"></script>
<style type='text/css'>
ul { list-style: none; }
</style>
<script>
$(function(){
});
</script>
<style>
</style>

</head>
<body>
<input type="button" id="recordingstart" onclick="startRecording(this);" style="display: block;" value="録音スタート"/>
<input type="button" id="recordingstop" onclick="stopRecording(this);" style="display: none;" value="停止"/>

<h3>Status</h3>
<pre id="log"></pre>

<script>
function __log(e, data) {
	log.innerHTML += e + " " + (data || '') + '\n';
}

var audio_context;
var recorder;

function startUserMedia(stream){
  var input = audio_context.createMediaStreamSource(stream);
  __log('Media stream created.');

  recorder = new Recorder(input);
  __log('Recorder initialised.');
}

function startRecording(button){
  recorder && recorder.record();
  $('#recordingstart').css( 'display', 'none' );
  $('#recordingstop').css( 'display', 'block' );
  __log('Recording...');
}

function stopRecording(button){
  recorder && recorder.stop();
  $('#recordingstart').css( 'display', 'block' );
  $('#recordingstop').css( 'display', 'none' );
  __log('Stopped recording.');

  sendRecordData();
  recorder.clear();
}

function sendRecordData(){
  console.log( 'sendRecordData()' );
  recorder.getBuffer( function( buffer ){
    console.log( buffer );   //. [ Float32Array, Float32Array ]

    if( buffer[0].length ){
      var channel = 2;
      var length = buffer[0].length;
      var audioBuffer = audio_context.createBuffer( channel, length, audio_context.sampleRate );
      var float32ArrayLs = audioBuffer.getChannelData(0);
      var float32ArrayRs = audioBuffer.getChannelData(1);
      float32ArrayLs.set( buffer[0] );
      float32ArrayRs.set( buffer[1] );
      console.log( audioBuffer );
      var Ls = audioBuffer.getChannelData(0);
      var Rs = audioBuffer.getChannelData(1);
      console.log( Ls );
      console.log( Rs );

      var source = audio_context.createBufferSource();
      source.buffer = audioBuffer;
      source.loop = false;
      source.loopStart = 0;
      source.loopEnd = audioBuffer.duration;
      source.playbackRate.value = 1.0;
      source.connect( audio_context.destination );

      source.start( 0 );
      source.onended = function( event ){
        source.onended = null;
        source.stop( 0 );
        console.log( '"on ' + event.type + '" event' );
      };

      //console.log( buffer );   //. [ [ 0.1, 0.2, .. ], [ 0.1, 0.2, .. ] ]   : [ Float32Array, Float32Array ]
    }else{
      console.log( 'No buffer data found.' );
    }

/*
    for( var i = 0; i < buffer.length; i ++ ){
      console.log( buffer[i] );
      buffer[i] = buffer[i].reverse();
      console.log( buffer[i] );
    }

    console.log( buffer );
*/
  });
}

function speechExamplification( button ){
  var englishtext = $('#englishtext').html();
  var voice = $('#voice').val();
  $('#englishspeech').attr( 'src', './t2s?text=' + englishtext + '&voice=' + voice );
}

window.onload = function init(){
  try{
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
    window.URL = window.URL || window.webkitURL;

    audio_context = new AudioContext();
    __log('Audio context set up.');
    __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
  }catch (e){
    alert('No web audio support in this browser!');
  }

  //navigator.mediaDevices.getUserMedia({audio: true}, startUserMedia, function(e) {
  navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
    __log('No live audio input: ' + e);
  });
};
</script>

<script src="./recorder.js"></script>
</body>
</html>
